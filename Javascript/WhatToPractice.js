function randomizePractice(array){
  let number = Math.floor(Math.random() * array.length)
  return array[number];
}

let array = ["dfs_tree",
            "bfs_tree",
            "dfs_graph",
            "bfs_graph",
            "merge_sort",
            "quick_sort",
            "insertion",
            "binary_tree",
            "Knuth Morris Prath",
            "reverse_list_inplace",
            "large_el_stack",
            "parentheticals",
            "parentheses_validator ",
            "check_for_cycle",
            "left_rotation",
            "merge_binary_tree",
            "search_in_bst",
            "maximum_depth_tree",
            "N-ary Tree Postorder Traversal",
            "Binary Search Tree : Lowest Common Ancestor",
            "is_unique",
            "is_permutation",
            "replace_white space",
            "Palindrome_permutation",
            "rotate_matrix_negative",
            "positive_rotate_matrix",
            "string_rotation",
            "cycle_linkedlist",
            "longest_consec_sequence",
            "find_peak_el_BST",
            "intersection_array",
            "Two_Sum",
            "Valid Perfect Square",
            "Reverse String",
            "To_Lower_Case",
            "Remove Duplicates from Sorted List",
            " Middle of the Linked List",
            "Reverse Linked List",
            "rotation point string",
            "Maximum Depth of Binary Tree",
            "merge_sorted_linked_list",
            "delete in lilnked list",
            "palindrome linked list",
            "Intersection of Two Linked Lists",
            "Valid Anagram string",
            "compare_linked_list",
            "insert_to_sorted_linked list",
            "Merge Lists Alternatingly",
            "Remove Duplicates from Sorted List II",
            "second_largest_BST",
            "k_smallest_BST",
            "findSecondMinimumValue",
            "is_BST_the tree",
            "kth to last node in linked list",
            "queue with stack",
            "messages_short_rout_graph",
            "Construct Binary Tree from Preorder and Inorder Traversal",
            "Uncommon Words from Two Sentences",
            " Island Perimeter", "Highest Possible Score",
            "sum of int in the list",
            "Convert Sorted Array to Binary Search Tree",
            "Level Order Tree Traversal in linked list",
            " Find Largest Value in Each Tree Row",
            "is_bst_full",
            "N-ary Tree Level Order Traversal",
            "longest word in dict",
            "Convert Sorted List to Binary Search Tree"]


  randomizePractice(array);
